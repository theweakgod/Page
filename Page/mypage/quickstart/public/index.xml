<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>mengcfunk&#39;s website</title>
        <link>http://www.mengcfunk.com/</link>
        <description>This is My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>1031205858@qq.com (mengxiangwei)</managingEditor>
            <webMaster>1031205858@qq.com (mengxiangwei)</webMaster><lastBuildDate>Mon, 12 Apr 2021 12:56:36 &#43;0800</lastBuildDate>
            <atom:link href="http://www.mengcfunk.com/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>python基础学习</title>
    <link>http://www.mengcfunk.com/pythonbase/</link>
    <pubDate>Mon, 12 Apr 2021 12:56:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/pythonbase/</guid>
    <description><![CDATA[懒人回归，开始写一下所学，怕忘记，好记性不如烂笔头。
python被称为解释性语言，那么他是如何实现这种解释的呢？python解释之后是怎么运行的呢？他是怎么实现一些基本操作的？
python的运行 python是怎么运行的呢
执行一个 .py 文件会经历如下过程
如图所示，python是有编译的，所有的python源文件都会在内存中被编译器翻译成由opcode组成字节码指令集, 而 import目录下会被保存成.pyc后缀名的文件，并缓存在执行目录，下次启动程序如果源代码没有修改过，则直接加载这个pyc文件，opcode可以说是一条字节码指令，这种字节码指令都是一个整体，无法分割。
在python虚拟机中，解释器主要在一个很大的循环中，不停地读入 opcode, 并根据opcode执行对应的指令，当执行完所有指令虚拟机退出，程序也就结束了。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  main_loop: for (;;) { ... switch (opcode) { /* BEWARE! It is essential that any operation that fails must goto error and that all operation that succeed call [FAST_]DISPATCH() !]]></description>
</item><item>
    <title>计算机网络</title>
    <link>http://www.mengcfunk.com/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <pubDate>Sun, 10 Jan 2021 18:05:59 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
    <description><![CDATA[计算机网络学习笔记  计算机网络 基础知识 物理层 速率:连接在计算机网络主机在数字信道上传输数据的速率. 速率的k是1000进制,存储容量是1024进制. 带宽值网络中从一点到另一点的最高速率 单位时间内通过某个网络的数据量 时延带宽积:传播时延*带宽 代表某段链路现在有多少比特 往返时延RTT:从发送方发送数据开始,到发送方收到接收方的确认,总共经历的时延
利用率分信道利用率和网络利用率.
 信道利用率:有数据通过的时间除以总时间 网络利用率:信道利用率加权平均值   为什么要分层  各层之间相互独立，高层只需要知道通过接口获得服务即可 灵活性好：各层之间都可以采用最合适的技术来实现。只要接口不变，不会产生影响 易于实现和标准化  协议是水平的,接口是上下的,上层可以使用下层的所有服务. 链路层 OSI分层结构实体,协议,接口,服务  实体:第n层中的活动元素成为n层实体,同一层的实体叫对等实体. 协议:为进行网络中的对等实体数据交换而建立的规则,标准或约定称为网络协议. 接口:上层使用下层服务的入口. 服务:下层为相邻上层的功能调用  SDU服务数据单元:为完成用户所要求的功能而应传送的数据 PCI协议控制信息:控制协议操作的信息 PDU协议数据单元:对等层次之间传送的数据单位
 码元是指用一个固定时长的信号波形(数字脉冲) 1个码元可以携带多个比特的信息量. 波特率:表示每秒传输n个码元 比特率:表示每秒传输n个比特  影响失真程度的因素:
 码元传输速率 信号传输距离 噪声干扰 传输媒体质量  码间串扰:接收端收到的信号波形失去了码元之间清晰界限的现象. 奈氏准则:在理想低通条件下,为了避免码间串扰,极限码元传输速率为2W Baud,W是信道带宽,单位是hz
失真 带宽存在是因为有握手包,自识别,例如:300-3300的频率限制,实际上是先识别握手包(类似的概念),确定频率,再进行传输.
奈氏准则给出了码元传输速率的限制,但并没有对信息传输速率给出限制 香农定理在贷款首先且有噪声的信道中,为了不产生误差,信息的数据传输速率有上限值
2020/10/10起
 信道:信号的传输没接.一般用来表示向某一个方向传递信息的介质,一条通信线路往往包含一条发送和一条接收信道.  1 2 3 4 5 6 7  graph LR; A[数据]--编码--&gt;B[数字信号] G[数据]--调制--&gt;T[模拟信号] 数字数据--数字发送器--&gt;NS[数字信号`编码`] 数字数据--调制器--&gt;SS[模拟信号`调制`] 模拟数据--PCM编码器--&gt;NS1[数字信号`编码`] 模拟数据--放大器调制器--&gt;模拟信号&#39;调制&#39;   编码不按照定长时间周期是因为时间周期对于硬件来说并不是十分准确的,可能硬件之间有差异,若果一个为1.]]></description>
</item><item>
    <title>高并发编程理解</title>
    <link>http://www.mengcfunk.com/licenseplate/</link>
    <pubDate>Thu, 07 Jan 2021 13:08:11 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/licenseplate/</guid>
    <description><![CDATA[AtomicInteger: Java中的关键字,不用加锁也可以实现递增. 底层通过CAS(compare and swap)方法实现. CAS方法:  线程读取AtomicInteger的值,加1之后再比较新的值,如果新的值未改变,则更新新值,如果改变,则重复上述步骤.
 解决线程读取过程中的ABA问题.0-&gt;2-&gt;0,线程是不可见这种改变的.但这种改变有很有意义, 解决方法:增加版本号,并且读取当前值时也读取版本号.
synchronized:是Java中的关键字,是一种同步锁.它修饰的对象有以下集中:
 修饰一个代码块 修饰一个方法 修改一个静态的方法 修改一个类  关于锁的信息是记录在对象的markword里面,markword占8个字节,锁的升级过程的信息都会存在markword中.
新建的对象为无锁态.当有线程调用时,会将锁变成偏向锁,当有线程争用这个锁时,就会升级为轻量级锁,轻量级锁(自旋锁)会一直自旋(消耗内存),也是同样的使用CAS操作,但是当这个自旋过程超过10次时,或者自旋线程超过CPU核数的一半,就会从用户态陷入内核态,交由操作系统,让他去控制wait,这样不消耗内存,让操作系统去调用它.
一个有趣的乱序证明:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  public class funnyDisturb { private static int x=0,a=0; private static int y=0,b=0; public static void main(String[] args) throws InterruptedException { int i=0; for(;;){ i++; x=0;y=0; a=0;b=0; Thread one = new Thread(new Runnable() { @Override public void run() { a=1; x=b; } }); Thread two = new Thread(new Runnable() { @Override public void run() { b=1; y=a; } }); one.]]></description>
</item><item>
    <title>操作系统</title>
    <link>http://www.mengcfunk.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
    <pubDate>Wed, 06 Jan 2021 13:23:06 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
    <description><![CDATA[操作系统 操作系统的特征 并发 指两个事或多个事在同一时间间隔内发生。这种事件宏观上是同时发生的，但微观上是交替发生的(时分复用)
操作系统的并发性指计算机系统中同时存在着多个运行着的程序
让用户看起来觉得是并行的，实则不是，虽然现在多核cpu能够实现并行，但并发也是必不可少的
共享 共享就是资源共享，指多个并发执行的进程共同使用。 分互斥共享和同时共享。
 互斥共享：一个时间段只能允许一个进程访问该资源 同时共享：一个时间段由多个进程“同时”对它们进行访问  如果失去并发性，则系统中只有一个程序正在运行，共享就没有了意义 如果失去共享性，则不同的进程无法访问同一个资源，并发就无法实现了。
虚拟 虚拟内存，
异步 异步就是说，在多个程序并发执行下，由于资源是有限的，进程的执行不是一贯到底的，而是走走停停。]]></description>
</item><item>
    <title>动态规划</title>
    <link>http://www.mengcfunk.com/dynamicprogram/</link>
    <pubDate>Thu, 17 Dec 2020 19:24:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/dynamicprogram/</guid>
    <description><![CDATA[动态规划 简介 动态规划(dynamic programming)与分治方法相似,都是通过组合子问题的解来求解原问题.但动态规划用来求解子问题重叠的情况.动态规划方法通常用来求解最优化问题(optimization problem).
钢条切割 给定一段长度为n英寸的钢条和一个价格表Pi,求切割钢条方案,使得销售收益Rn最大.注意,如果长条为n英寸的钢条的价格Pn足够大,最优解可能就是完全不需要切割.
   长度i   1 2 3 4 5 6 7 8 9 10     价格Pi   1 5 8 9 10 17 17 20 24 30    动态规划,自顶向下,加入备忘机制,伪代码:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  let r[0...n] be a new array for i = 0 to n r[i]=-$\Infty$ return MEMOIZED-CUT-ROD-AUX(p,n,r) MEMOIZED-CUT-ROD-AUX(p,n,r){ if(r[n]&gt;=0) return r[n] if(n==0) q=0 else(q==-$\Infty$) for i=1 to n q=max(q,p[i]+MEMOIZED-CUT-ROD-AUX(p,n-i,r)) r[n]=q return q }   简单计算一下,该函数传递进去,先计算for i=1 to n,那么调用的就是参数为n-1的函数,反复调用至第1层,则r[1&hellip;n-1]都大于0了.]]></description>
</item><item>
    <title>N皇后问题</title>
    <link>http://www.mengcfunk.com/nqueen/</link>
    <pubDate>Thu, 05 Mar 2020 14:56:50 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/nqueen/</guid>
    <description><![CDATA[n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。
  N皇后问题棋盘   我们要做的就是把这种结果求出来,通过回朔法的方式把这个树建出来,在求解的过程中做剪枝,不用暴力破解这个答案,因为即使是8*8的所有解都是编译器难以接受的. 算法是我自己写的,没有优化.很久之前写的,更新博客的时候发现有这个就加进来了.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159  #include&lt;stdio.]]></description>
</item><item>
    <title>AVL平衡树</title>
    <link>http://www.mengcfunk.com/binarybalancedtree/</link>
    <pubDate>Thu, 05 Mar 2020 13:48:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/binarybalancedtree/</guid>
    <description><![CDATA[豁,这个就有意思了,这个是平衡二叉树,是在二叉排序树的基础上保持他很胖(可以想象越吃的多,越保持身体各方面维生素的均衡).能够增加查找的效率,但建立比较耗时.
因为严蔚敏老师那本教材没有源码,所以有了写出来的想法,本人有点愚钝,写的很慢,但过程很有意思,当然B和B+树和红黑树更难,但我只写出了这个代码,不深究上述树是因为我太菜了(I&rsquo;m too vegetable!) 话不多说,介绍这个过程:
  平衡二叉树定义:它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 二叉查找树退化成链表的问题，把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)。但是频繁旋转会使插入和删除牺牲掉O(logN)左右的时间，不过相对二叉查找树来说，时间上稳定了很多。
平衡二叉树不平衡的情形：
把需要重新平衡的结点叫做α，由于任意两个结点最多只有两个儿子，因此高度不平衡时，α结点的两颗子树的高度相差2.容易看出，这种不平衡可能出现在下面4中情况中：
1.对α的左儿子的左子树进行一次插入
2.对α的左儿子的右子树进行一次插入
3.对α的右儿子的左子树进行一次插入
4.对α的右儿子的右子树进行一次插入
  出现这种情况,就需要对这个插入的节点进行左右旋、右左旋、左左旋、右右旋来使得满足平衡二叉树的定义。
左左旋：
  右左：
include&lt;stdio.]]></description>
</item><item>
    <title>不知道做的啥玩意,有点久远了</title>
    <link>http://www.mengcfunk.com/linearbinarytree/</link>
    <pubDate>Thu, 05 Mar 2020 13:48:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/linearbinarytree/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105  #include&lt;stdio.]]></description>
</item><item>
    <title>二叉排序树</title>
    <link>http://www.mengcfunk.com/binarysortingtree/</link>
    <pubDate>Thu, 05 Mar 2020 13:48:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/binarysortingtree/</guid>
    <description><![CDATA[二叉排序树:
一棵空树，或者是具有下列性质的二叉树：
（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；
（2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值；
（3）左、右子树也分别为二叉排序树；
（4）没有键值相等的结点。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136  #include&lt;stdio.]]></description>
</item><item>
    <title>二叉树</title>
    <link>http://www.mengcfunk.com/binarytree/</link>
    <pubDate>Thu, 05 Mar 2020 13:48:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/binarytree/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129  #include&lt;stdio.]]></description>
</item></channel>
</rss>
