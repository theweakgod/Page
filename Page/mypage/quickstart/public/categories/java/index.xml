<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>java - 分类 - mengcfunk&#39;s website</title>
        <link>http://www.mengcfunk.com/categories/java/</link>
        <description>java - 分类 - mengcfunk&#39;s website</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>1031205858@qq.com (mengxiangwei)</managingEditor>
            <webMaster>1031205858@qq.com (mengxiangwei)</webMaster><lastBuildDate>Thu, 07 Jan 2021 13:08:11 &#43;0800</lastBuildDate><atom:link href="http://www.mengcfunk.com/categories/java/" rel="self" type="application/rss+xml" /><item>
    <title>高并发编程理解</title>
    <link>http://www.mengcfunk.com/licenseplate/</link>
    <pubDate>Thu, 07 Jan 2021 13:08:11 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/licenseplate/</guid>
    <description><![CDATA[AtomicInteger: Java中的关键字,不用加锁也可以实现递增. 底层通过CAS(compare and swap)方法实现. CAS方法:  线程读取AtomicInteger的值,加1之后再比较新的值,如果新的值未改变,则更新新值,如果改变,则重复上述步骤.
 解决线程读取过程中的ABA问题.0-&gt;2-&gt;0,线程是不可见这种改变的.但这种改变有很有意义, 解决方法:增加版本号,并且读取当前值时也读取版本号.
synchronized:是Java中的关键字,是一种同步锁.它修饰的对象有以下集中:
 修饰一个代码块 修饰一个方法 修改一个静态的方法 修改一个类  关于锁的信息是记录在对象的markword里面,markword占8个字节,锁的升级过程的信息都会存在markword中.
新建的对象为无锁态.当有线程调用时,会将锁变成偏向锁,当有线程争用这个锁时,就会升级为轻量级锁,轻量级锁(自旋锁)会一直自旋(消耗内存),也是同样的使用CAS操作,但是当这个自旋过程超过10次时,或者自旋线程超过CPU核数的一半,就会从用户态陷入内核态,交由操作系统,让他去控制wait,这样不消耗内存,让操作系统去调用它.
一个有趣的乱序证明:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  public class funnyDisturb { private static int x=0,a=0; private static int y=0,b=0; public static void main(String[] args) throws InterruptedException { int i=0; for(;;){ i++; x=0;y=0; a=0;b=0; Thread one = new Thread(new Runnable() { @Override public void run() { a=1; x=b; } }); Thread two = new Thread(new Runnable() { @Override public void run() { b=1; y=a; } }); one.]]></description>
</item><item>
    <title>java虚拟机学习</title>
    <link>http://www.mengcfunk.com/demo1/</link>
    <pubDate>Mon, 02 Mar 2020 16:56:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://www.mengcfunk.com/demo1/</guid>
    <description><![CDATA[JVM的学习记录 JVM的生命周期 JAVA虚拟机的启动 JAVA虚拟机的启动是通过引导类加载器(bootstrap class loader)创建一个初始类(initial class)来完成的。初始类中会加载很多内容。
JAVA虚拟机的执行  程序开始执行时他才运行,程序结束时停止运行 所谓的执行JAVA程序,真真正正运行的是一个JAVA虚拟机的进程。可以有多个进程，这并不冲突。  JAVA虚拟机的结束(结束JAVA虚拟机进程)  程序正常执行结束 程序在执行过程中遇到了异常或错误而异常终止 由于操作系统出现错误而导致JAVA虚拟机进程终止 某线程调用Runtime类或System类的exit方法(exit方法仍然是调用的Runtime的halt方法),或Runtime类的halt方法,并且JAVA安全管理器也允许这次exit或halt方法. 该方法的本质还是调用halt0(int status)的本地方法. JNI(Java Native Interface)规范描述了用JNI Invocation API 来加载或卸载 Java虚拟机时,Java虚拟机的退出情况。 主流虚拟机都是解释+编译，如果把解释比如成步行，编译比如成坐公交，那么坐公交等待时间太长，步行虽然不用等待，但终归没有坐公交快。所以现在主流的虚拟机都是解释+编译！  hotspot虚拟机 默认的虚拟机都是Hotspot,底层有通过计数器找到最具编译价值代码,触发即时编译或栈上替换。 通过编译器和解释器同时工作，在最优化的程序响应时间与最佳执行性能中取得平衡。
JRockit JRockit是世界上最快的Java虚拟机。
类加载过程 加载  通过一个类的全限定名获取定义此类的二进制字节流 将这个字节流所代表的静态存储结果转化为方法去的运行时数据结构 在内存中生成一个代表这个类的java.lang.Class对象,作为方法区这个类的各种数据的访问入口  链接 验证  目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求,保证被加载类的正确性,不会危害虚拟机自身安全. 主要包含四中验证,文件格式验证,元数据验证,字节码验证,符号引用验证.  准备  为类变量分配内存并且设置该类变量的默认初始值,即零值. 这里不包含用final修饰的static,因为final在编译的时候就会分配了,准备阶段会显式初始化 这里不会为实例变量分配初始化,类变量会分配在方法区中,而实例变量是会随着对象一起分配到Java堆中.  解析  将常量池内的符号引用转换为直接引用的过程. 事实上,解析操作往往会伴随着JVM在执行完初始化之后再执行. 符号引用就是一组符号来描述所引用的目标.符号引用的字面量形式明确定义在《java虚拟机规范》的Class文件格式中.直接引用就是直接指向目标的指针,相对偏移量或一个简洁定位到目标的句柄. 解析动作主要针对类或接口,字段,类方法,接口方法,方法型等.对应常量池中的CONSTANT_Class_info,CONSTANT_Fieldref_info,CONSTANT_Methodref_info等.  初始化  初始化阶段就是执行类构造器方法()过程. 此方法不需要定义,是javac编译器自动收集类中的所有类变量的复制动作和静态代码块中的语句合并而来. 构造器方法中指令按语句在原文件中出现的顺序执行. ()不同于类的构造器.(关联:构造器是虚拟机视角下的()) 若该类具有父类,JVM会保证子类的()执行前,父类的()已经执行完毕. 虚拟机必须保证一个类的()方法在多线程下被同步加锁.  类加载器的分类 JVM支持两种类型的类加载器,分别为引导类加载器(Bootstrap ClassLoader)和自定义类加载器(UserDefined ClassLoader).]]></description>
</item></channel>
</rss>
